import datetime
from typing import List, Tuple
from telegram_bot_calendar import DetailedTelegramCalendar
from keyboards.inline.accept_info import accept_info
from keyboards.inline.calendar import get_calendar
from keyboards.inline.geo import geo
from keyboards.inline.question_photo import question_photo
from keyboards.reply.all_command import all_commands
from keyboards.reply.again_button import start_again
from loader import bot
from telebot.types import Message, CallbackQuery, InputMediaPhoto
from parser_API.parser import get_city_id, get_hotels, get_photo
from states.UserState import UserState


def date_to_text(date: str) -> str:
    """–§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞–µ—Ç –¥–∞—Ç—É –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥ —Ç–µ–∫—Å—Ç–æ–º"""
    month_list = ['0', '—è–Ω–≤–∞—Ä—è', '—Ñ–µ–≤—Ä–∞–ª—è', '–º–∞—Ä—Ç–∞', '–∞–ø—Ä–µ–ª—è', '–º–∞—è', '–∏—é–Ω—è',
                  '–∏—é–ª—è', '–∞–≤–≥—É—Å—Ç–∞', '—Å–µ–Ω—Ç—è–±—Ä—è', '–æ–∫—Ç—è–±—Ä—è', '–Ω–æ—è–±—Ä—è', '–¥–µ–∫–∞–±—Ä—è']
    month = int(date[-5:-3])
    form_date = date[-2:] + ' ' + month_list[month] + ' ' + date[:4]

    return form_date




def send_info(message: Message) -> None:
    """–§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞–µ—Ç –¥–∞—Ç—É –≤ —Å—Ç—Ä–æ–∫—É, —Å—á–∏—Ç–∞–µ—Ç —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É –¥–≤—É–º—è –¥–∞—Ç–∞–º–∏, –∏
    –≤—ã–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–≤–µ–¥–µ–Ω–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""

    with bot.retrieve_data(message.chat.id) as data:
        pass
    check_in = datetime.datetime.strptime(str(data["check_in"][0]), '%Y-%m-%d')
    check_out = datetime.datetime.strptime(str(data["check_out"][0]), '%Y-%m-%d')

    # –Ω–∞—Ö–æ–¥–∏–º —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É –¥–≤—É–º—è –¥–∞—Ç–∞–º–∏
    all_days = check_out - check_in
    days = str(all_days).split()
    days = int(days[0])
    with bot.retrieve_data(message.chat.id) as data:
        data["days"] = days

    text = 'üòÄ –î–∞–≤–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏–º –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n' \
           f'\n–ì–æ—Ä–æ–¥: {data["city_name"]}' \
           f'\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–µ–ª–µ–π –Ω–∞ —ç–∫—Ä–∞–Ω–µ: {data["hotels_count"]}' \
           f'\n–ó–∞–µ–∑–¥: {data["check_in"][1]}' \
           f'\n–í—ã–µ–∑–¥: {data["check_out"][1]}' \
           f'\n–î–Ω–µ–π –≤—Å–µ–≥–æ: {data["days"]}' \
           f'\n\n<b>–í—Å–µ –≤–µ—Ä–Ω–æ‚ùì</b>'

    bot.send_message(message.chat.id,
                     text,
                     reply_markup=accept_info(),
                     parse_mode='html')


def photo(message: Message, hotels: List[Tuple]) -> List[List]:
    """–§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø–∞—Ä—Å–∏—Ç —Ñ–æ—Ç–æ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∏—Ö –≤ –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫"""

    with bot.retrieve_data(message.chat.id) as data:
        pass

    all_photo_list = []
    for hotel in hotels:

        # –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ñ–æ—Ç–æ
        photo_list = get_photo(hotel[0], data["photo_count"])
        if photo_list is not None:
            all_photo_list.append(photo_list)

        else:
            # –¥–æ–±–∞–≤–ª—è–µ–º, –µ—Å–ª–∏ —Ñ–æ—Ç–æ –ø–æ –æ—Ç–µ–ª—é –Ω–µ –±—ã–ª–∏ –Ω–∞–π–¥–µ–Ω—ã
            all_photo_list.append(['—Ñ–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'])

    return all_photo_list


@bot.message_handler(commands=['lowprice', 'highprice', 'bestdeal'])
def start(message: Message) -> None:
    """–§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∏ –ª–æ–≤–∏—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–º–∞–Ω–¥—ã"""

    bot.set_state(message.from_user.id, UserState.command, message.chat.id)
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data["command"] = message.text

    bot.set_state(message.from_user.id, UserState.city, message.chat.id)
    bot.send_message(message.from_user.id, '  üèô –£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ—Ç–µ–ª–µ–π:')


@bot.message_handler(state=UserState.city)
def set_city(message: Message) -> None:
    """–§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–µ–ª–µ–π"""

    if not message.text.isdigit():
        bot.send_message(message.from_user.id,
                         'üè® –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–µ–ª–µ–π –¥–ª—è –≤—ã–≤–æ–¥–∞ –Ω–∞ —ç–∫—Ä–∞–Ω:')
        bot.set_state(message.from_user.id, UserState.hotel_count, message.chat.id)

        # –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º, –∑–∞–¥–∞–Ω–Ω—ã–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö
        with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            data['city_name'] = message.text.title()
    else:
        bot.send_message(message.from_user.id, '–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–æ–ª–∂–Ω–æ —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ –±—É–∫–≤')


@bot.message_handler(state=UserState.hotel_count)
def set_hotel_count(message: Message) -> None:
    """–§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–µ–ª–µ–π –∏ —Å–æ–∑–¥–∞–µ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è
    —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–∞—Ç—ã –∑–∞–µ–∑–¥–∞ –≤ –æ—Ç–µ–ª—å"""

    if message.text.isdigit():
        with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            data['hotels_count'] = int(message.text)

        # —Å–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –¥–∞—Ç—ã –∑–∞–µ–∑–¥–∞
        calendar, step = get_calendar(calendar_id=1,
                                      min_date=datetime.date.today(),
                                      current_date=datetime.date.today(),
                                      locale='ru')

        bot.set_state(message.from_user.id, UserState.check_in, message.chat.id)
        bot.send_message(message.chat.id, f'–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∑–∞—Å–µ–ª–µ–Ω–∏—è: ',
                         reply_markup=calendar)

    else:
        bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ü–∏—Ñ—Ä–∞–º–∏')


@bot.callback_query_handler(func=DetailedTelegramCalendar.func(calendar_id=1))
def calendar(call: CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–≤–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –¥–ª—è –¥–∞—Ç—ã –∑–∞–µ–∑–¥–∞"""

    result, key, step = get_calendar(calendar_id=1,
                                     min_date=datetime.date.today(),
                                     current_date=datetime.date.today(),
                                     locale='ru',
                                     callback_data=call,
                                     is_process=True)

    if not result and key:
        bot.edit_message_text(f'–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü:',
                              call.message.chat.id,
                              call.message.message_id,
                              reply_markup=key)
    elif result:
        str_check_in = date_to_text(str(result))

        bot.edit_message_text(f'‚û° –ó–∞–µ–∑–¥: {str_check_in}',
                              call.message.chat.id,
                              call.message.message_id)
        with bot.retrieve_data(call.message.chat.id) as data:
            data["check_in"] = (result, str_check_in)

        # —Å–æ–∑–¥–∞–µ–º –≤—Ç–æ—Ä–æ–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –¥–∞—Ç—ã –≤—ã–µ–∑–¥–∞
        calendar = get_calendar(calendar_id=2,
                                min_date=data["check_in"][0],
                                current_date=data["check_in"][0],
                                locale='ru')

        bot.set_state(call.message.from_user.id, UserState.check_out, call.message.chat.id)
        bot.send_message(call.message.chat.id, f'–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –≤—ã–µ–∑–¥–∞: ',
                         reply_markup=calendar)


@bot.callback_query_handler(func=DetailedTelegramCalendar.func(calendar_id=2))
def calendar(call: CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–≤–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –¥–ª—è –¥–∞—Ç—ã –≤—ã–µ–∑–¥–∞"""

    with bot.retrieve_data(call.message.chat.id) as data:
        pass
    result, key, step = get_calendar(calendar_id=2,
                                     min_date=data["check_in"][0],
                                     current_date=data["check_in"][0],
                                     locale='ru',
                                     callback_data=call,
                                     is_process=True)
    if not result and key:
        bot.edit_message_text(f'–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü:',
                              call.message.chat.id,
                              call.message.message_id,
                              reply_markup=key)
    elif result:
        str_check_out = date_to_text(str(result))
        bot.edit_message_text(f'‚¨Ö –í—ã–µ–∑–¥: {str_check_out}',
                              call.message.chat.id,
                              call.message.message_id)
        with bot.retrieve_data(call.message.chat.id) as data:
            data["check_out"] = (result, str_check_out)

        # –µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ bestdeal, —Ç–æ –º—ã —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –Ω–µ–≥–æ –∏
        # –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –º–æ–¥—É–ª—å bestdeal.py
        if data["command"] == '/bestdeal':
            bot.set_state(call.message.chat.id, UserState.prices)
            bot.send_message(call.message.chat.id,
                             'üí≤ –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –¥–∏–∞–ø–æ–∑–æ–Ω —Ü–µ–Ω –æ—Ç–µ–ª–µ–π(–ø—Ä–∏–º–µ—Ä: 100 - 500)')

        else:
            # –µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –ù–ï bestdeal, —Ç–æ –∏–¥–µ–º –¥–∞–ª—å—à–µ –ø–æ —Å—Ü–µ–Ω–∞—Ä–∏—é
            bot.set_state(call.message.chat.id, UserState.photo_count)
            bot.send_message(call.message.chat.id, 'üì∏ –í—ã–≤–µ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ —Å —Ñ–æ—Ç–æ?',
                             reply_markup=question_photo())


@bot.callback_query_handler(func=lambda call: call.data == 'yes' or call.data == 'no')
def callback_inline(call: CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∫–Ω–æ–ø–æ–∫ """

    if call.message:
        if call.data == 'yes':
            bot.send_message(call.message.chat.id, '‚úÖ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è')
            bot.set_state(call.from_user.id, UserState.photo_count)
        elif call.data == 'no':
            # –≤—ã–≤–æ–¥–∏–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–≤–µ–¥–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            send_info(message=call.message)


@bot.message_handler(state=UserState.photo_count)
def photo_count(message: Message) -> None:
    """–§—É–Ω–∫—Ü–∏—è, –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–Ω–∞—á–µ–Ω–∏—è photo_count"""

    if message.text.isdigit():
        with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            data['photo_count'] = int(message.text)

        # –≤—ã–≤–æ–¥–∏–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–≤–µ–¥–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        send_info(message=message)

    else:
        bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —á–∏—Å–ª–æ')


@bot.callback_query_handler(func=lambda call: call.data == 'show_result' or call.data == 'again')
def callback_func(call: CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∫–Ω–æ–ø–æ–∫ """

    if call.message:
        if call.data == 'show_result':
           show_hotels(call.message)

        # –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã —Å –æ—à–∏–±–∫–æ–π
        elif call.data == 'again':
            with bot.retrieve_data(call.message.chat.id) as data:
                pass
            bot.send_message(call.message.chat.id, ' üîÅ –¢–æ–≥–¥–∞ –¥–∞–≤–∞–π—Ç–µ –≤–≤–µ–¥–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–Ω–æ–≤–æ,'
                                                   '–î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É',
                             reply_markup=start_again(command=data["command"]))


def show_hotels(message: Message) -> None:
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API-hotels –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏"""

    bot.send_message(message.chat.id,
                     'üîú –û—Ç–ª–∏—á–Ω–æ, –Ω–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫(—ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...)')
    with bot.retrieve_data(message.chat.id) as data:
        pass

    # –ø–æ–ª—É—á–∞–µ–º id –≥–æ—Ä–æ–¥–∞
    city_id = get_city_id(data["city_name"])
    if city_id is not None:

        # –µ—Å–ª–∏ id –Ω–∞–π–¥–µ–Ω–æ, –∏–¥–µ–º –¥–∞–ª—å—à–µ
        bot.send_message(message.chat.id, '‚ú≥ –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –æ—Ç–µ–ª—è–º...')

        # –∑–∞–ø—Ä–æ—Å –¥–ª—è –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –æ—Ç–µ–ª—è–º —Å –∫–æ–º–∞–Ω–¥–æ–π lowprice
        if data["command"] == '/lowprice':
            hotels = get_hotels(city_id=city_id,
                                search_info="PRICE",
                                count=data["hotels_count"],
                                check_in=str(data["check_in"][0]),
                                check_out=str(data["check_out"][0]))

        # –∑–∞–ø—Ä–æ—Å –¥–ª—è –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –æ—Ç–µ–ª—è–º —Å –∫–æ–º–∞–Ω–¥–æ–π highprice
        elif data["command"] == '/highprice':
            hotels = get_hotels(city_id=city_id,
                                search_info="PRICE_HIGHEST_FIRST",
                                count=data["hotels_count"],
                                check_in=str(data["check_in"][0]),
                                check_out=str(data["check_out"][0]))

        # –∑–∞–ø—Ä–æ—Å –¥–ª—è –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –æ—Ç–µ–ª—è–º —Å –∫–æ–º–∞–Ω–¥–æ–π bestdeal
        else:
            hotels = get_hotels(city_id=city_id,
                                search_info="DISTANCE_FROM_LANDMARK",
                                count=data["hotels_count"],
                                start_price=data["prices"][0],
                                stop_price=data["prices"][1],
                                dist=data["dist_range"],
                                check_in=str(data["check_in"][0]),
                                check_out=str(data["check_out"][0]),
                                command=data["command"])

        # –µ—Å–ª–∏ –æ—Ç–µ–ª–∏ —Å–ø–∞—Ä—Å–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ
        if hotels is not None:

            # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª –≤—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å —Ñ–æ—Ç–æ
            if data.get("photo_count") is not None:
                all_photo_list = photo(message=message, hotels=hotels)
                get_info(message, hotels, all_photo_list)
            else:
                get_info(message, hotels)

        # –µ—Å–ª–∏ –æ—Ç–µ–ª–∏ –ù–ï –±—ã–ª–∏ –ø–æ–ª—É—á–µ–Ω—ã
        else:
            bot.send_message(message.chat.id,
                             '‚ùó –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –æ—Ç–µ–ª—è–º')
    else:

        # –µ—Å–ª–∏ id –≥–æ—Ä–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, —Ç–æ –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot.send_message(message.chat.id,
                         f'‚ùó –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, '
                         f'–¥–∞–Ω–Ω—ã–µ –ø–æ –≤–∞—à–µ–º—É –≥–æ—Ä–æ–¥—É {data["city_name"]} –Ω–µ –±—ã–ª–∏ –Ω–∞–π–¥–µ–Ω—ã')


def get_info(message: Message, hotels: List[Tuple], all_photo_list: List[List] = None) -> None:
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –æ—Ç–µ–ª—è–º –≤ —Ç–µ–ª–µ–≥—Ä–∞–º(—Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏)"""

    with bot.retrieve_data(message.chat.id) as data:
        pass
    bot.send_message(message.chat.id, '–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞:')
    for i in range(int(data["hotels_count"])):
        try:
            # –ø–æ–¥—Å—á–µ—Ç –æ–±—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –æ—Ç–µ–ª—è
            total_cost = round(data["days"] * float(hotels[i][2][1:]), 5)
            text = f'üè® –ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ç–µ–ª—è: {hotels[i][1]}'\
                   f'\nüìç –ê–¥—Ä–µ—Å –æ—Ç–µ–ª—è: {hotels[i][3]}' \
                   f'\n‚úî –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞: {hotels[i][6]}' \
                   f'\nüíµ –¶–µ–Ω–∞ –∑–∞ —Å—É—Ç–∫–∏: {hotels[i][2][1:]}{hotels[i][2][0]}' \
                   f'\nüí∞ –¶–µ–Ω–∞ –≤—Å–µ–≥–æ: {total_cost}$' \
                   f'\n‚ú® –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ –æ—Ç–µ–ª—è: {hotels[i][5]}' \
                   f'\nüìà –†–µ–π—Ç–∏–Ω–≥ –æ—Ç–µ–ª—è: {hotels[i][4]}' \

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ
            bot.send_message(message.chat.id, text,
                             reply_markup=geo(hotels[i][7], hotels[i][8]))

        # –ª–æ–≤–∏–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤–æ–∑–Ω–∏–∫–Ω–µ—Ç –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ —Ç–æ–≥–æ, —á—Ç–æ –æ—Ç–µ–ª–µ–π –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É
        # —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ –±—É–¥–µ—Ç –º–µ–Ω—å—à–µ, —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        except IndexError:
            bot.send_message(message.chat.id,
                             '–û—Ç–µ–ª–µ–π –≤ –∑–∞–¥–∞–Ω–Ω–æ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ –±–æ–ª—å—à–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏')

        if all_photo_list is not None:
            bot.send_media_group(message.chat.id,
                                 [InputMediaPhoto(media=i_photo)
                                  if i_photo != '—Ñ–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
                                  else bot.send_message(
                                     message.chat.id,
                                     f'–î–ª—è –æ—Ç–µ–ª—è {hotels[i][1]} –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ñ–æ—Ç–æ')
                                  for i_photo in all_photo_list[i]])

    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏:', reply_markup=all_commands())


@bot.callback_query_handler(func=lambda call: call.data.startswith('geo'))
def callback_func(call: CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∫–Ω–æ–ø–æ–∫ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏ """

    if call.message:
        geo_data = call.data.split('/')
        lat = float(geo_data[1])
        lon = float(geo_data[2])
        if call.data:
            bot.send_location(call.message.chat.id, latitude=lat, longitude=lon)
