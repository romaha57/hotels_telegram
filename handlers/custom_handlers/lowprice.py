import datetime
from telebot.types import Message, CallbackQuery, InputMediaPhoto
from typing import List, Tuple

from keyboards.inline.geo import geo
from keyboards.reply.all_command import all_commands
from loader import bot
from states.UserStateLow import UserStateLow
from keyboards.inline.question_photo_low import question_photo_low
from keyboards.inline.accept_info_low import accept_info_low
from keyboards.reply.again_button_low import start_again_low
from parser_API.parser import requests_to_api, get_hotels, get_photo
from database.my_db import add_in_db


@bot.message_handler(commands=['lowprice'])
def start(message: Message) -> None:
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞"""

    # –£–¥–∞–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è finish –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∏–∑ –¥—Ä—É–≥–∏—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
    bot.delete_state(message.from_user.id, message.chat.id)
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≥–æ—Ä–æ–¥–∞
    bot.set_state(message.from_user.id, UserStateLow.city, message.chat.id)
    bot.send_message(message.from_user.id, '  üèô –£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ—Ç–µ–ª–µ–π:')


@bot.message_handler(state=UserStateLow.city)
def get_city(message: Message) -> None:
    """–§—É–Ω–∫—Ü–∏—è, –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–µ–ª–µ–π"""

    if not message.text.isdigit():
        bot.send_message(message.from_user.id,
                         'üè® –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–µ–ª–µ–π –¥–ª—è –≤—ã–≤–æ–¥–∞ –Ω–∞ —ç–∫—Ä–∞–Ω:')
        bot.set_state(message.from_user.id, UserStateLow.hotel_count, message.chat.id)

        # –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º, –∑–∞–¥–∞–Ω–Ω—ã–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö
        with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            data['city_name'] = message.text.title()
    else:
        bot.send_message(message.from_user.id, '–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–æ–ª–∂–Ω–æ —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ –±—É–∫–≤')


@bot.message_handler(state=UserStateLow.hotel_count)
def hotel_count(message: Message) -> None:
    """–§—É–Ω–∫—Ü–∏—è, –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –¥–∞—Ç—ã  """

    if message.text.isdigit():
        text = 'üìÖ –û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–µ–ª—è(—Ñ–æ—Ä–º–∞—Ç: –¥–¥-–º–º-–≥–≥–≥–≥/–¥–¥-–º–º-–≥–≥–≥–≥)'
        bot.send_message(message.from_user.id, text)
        bot.set_state(message.from_user.id, UserStateLow.date, message.chat.id)

        with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            data['hotels_count'] = message.text
    else:
        bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ü–∏—Ñ—Ä–∞–º–∏')


@bot.message_handler(state=UserStateLow.date)
def date(message: Message) -> None:
    """–§—É–Ω–∫—Ü–∏—è, –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –≤–≤–æ–¥–∏–º–æ–π –¥–∞—Ç—ã –∏ –≤–æ–ø—Ä–æ—Å–∞ –æ –≤—ã–≤–æ–¥–µ —Ñ–æ—Ç–æ"""

    dates = message.text.split('/')
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–≤–æ–¥–∏–º–æ–π –¥–∞—Ç—ã –Ω–∞ —à–∞–±–ª–æ–Ω –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏

        check_in = datetime.datetime.strptime(str(dates[0]), '%d-%m-%Y')
        check_out = datetime.datetime.strptime(str(dates[1]), '%d-%m-%Y')
        days = check_out - check_in
        bot.send_message(message.from_user.id, 'üì∏ –í—ã–≤–µ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ —Å —Ñ–æ—Ç–æ?'
                         , reply_markup=question_photo_low())
        bot.set_state(message.from_user.id, UserStateLow.photo_count, message.chat.id)

        with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            data['date'] = (dates[0], dates[1], days.days)

    except Exception:
        bot.send_message(message.from_user.id, '–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã.–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')


@bot.callback_query_handler(func=lambda call: call.data == 'yes' or call.data == 'no')
def callback_inline(call: CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∫–Ω–æ–ø–æ–∫ """

    if call.message:
        if call.data == 'yes':
            bot.send_message(call.message.chat.id, '‚úÖ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è')
        elif call.data == 'no':
            with bot.retrieve_data(call.message.chat.id) as data:
                pass
            text = 'üòÄ –î–∞–≤–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏–º –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n' \
                   f'\n–ì–æ—Ä–æ–¥: {data["city_name"]}' \
                   f'\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–µ–ª–µ–π –Ω–∞ —ç–∫—Ä–∞–Ω–µ: {data["hotels_count"]}' \
                   f'\n–ó–∞–µ–∑–¥: {data["date"][0]}' \
                   f'\n–í—ã–µ–∑–¥: {data["date"][1]}' \
                   f'\n–î–Ω–µ–π –≤—Å–µ–≥–æ: {data["date"][2]}'\
                   f'\n\n<b>–í—Å–µ –≤–µ—Ä–Ω–æ‚ùì</b>'

            bot.send_message(call.message.chat.id,
                             text,
                             reply_markup=accept_info_low(),
                             parse_mode='html')


@bot.message_handler(state=UserStateLow.photo_count)
def photo_count(message: Message) -> None:
    """–§—É–Ω–∫—Ü–∏—è, –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""

    bot.set_state(message.from_user.id, UserStateLow.finish, message.chat.id)
    if message.text.isdigit():
        with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            data['photo_count'] = message.text

        text = ' üòÄ –î–∞–≤–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏–º –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n' \
               f'\n–ì–æ—Ä–æ–¥: {data["city_name"]}' \
               f'\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–µ–ª–µ–π –Ω–∞ —ç–∫—Ä–∞–Ω–µ: {data["hotels_count"]}' \
               f'\n–ó–∞–µ–∑–¥: {data["date"][0]}' \
               f'\n–í—ã–µ–∑–¥: {data["date"][1]}' \
               f'\n–î–Ω–µ–π –≤—Å–µ–≥–æ: {data["date"][2]}' \
               f'\n–§–æ—Ç–æ —à—Ç—É–∫: {data["photo_count"]}' \
               f'\n\n<b>–í—Å–µ –≤–µ—Ä–Ω–æ?</b>' \

        bot.send_message(message.from_user.id,
                         text,
                         reply_markup=accept_info_low(),
                         parse_mode='html')

    else:
        bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —á–∏—Å–ª–æ')


@bot.callback_query_handler(func=lambda call: call.data == 'show_result' or call.data == 'again')
def callback_func(call: CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∫–Ω–æ–ø–æ–∫ """

    if call.message:
        if call.data == 'show_result':
           show_hotels(call.message)

        elif call.data == 'again':
            bot.send_message(call.message.chat.id, ' üîÅ –¢–æ–≥–¥–∞ –¥–∞–≤–∞–π—Ç–µ –≤–≤–µ–¥–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–Ω–æ–≤–æ,'
                                                   '–î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É',
                             reply_markup=start_again_low())


def show_hotels(message: Message) -> None:
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API-hotels –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏"""

    bot.send_message(message.chat.id, 'üîú –û—Ç–ª–∏—á–Ω–æ, –Ω–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫(—ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...)')
    bot.send_message(message.chat.id, '‚ùá –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–µ–ª—è –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ(1/3)...')
    with bot.retrieve_data(message.chat.id) as data:
        pass
    city_id = requests_to_api(data["city_name"])
    if city_id is not None:
        bot.send_message(message.chat.id, '‚ú≥ –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –æ—Ç–µ–ª—è–º(2/3)...')

        # –∑–∞–ø—Ä–æ—Å –¥–ª—è –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –æ—Ç–µ–ª—è–º —Å –∫–æ–º–∞–Ω–¥–æ–π lowprice
        hotels = get_hotels(city_id=city_id, search_info="PRICE", count=data["hotels_count"])
        if hotels is not None:
            all_photo_list = []
            try:
                for hotel in hotels:
                    photo_list = get_photo(hotel[0], data["photo_count"])
                    if photo_list is not None:
                        all_photo_list.append(photo_list)
                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ñ–æ—Ç–æ
                    else:
                       all_photo_list.append(['—Ñ–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'])

            except Exception:
                pass
            # –µ—Å–ª–∏ –æ—à–∏–±–æ–∫ –Ω–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ñ—É–Ω–∫—Ü–∏—é –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –æ—Ç–µ–ª—è–º
            print_info(message, hotels, all_photo_list)
        else:
            bot.send_message(message.chat.id, '‚ùó –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –æ—Ç–µ–ª—è–º')
    else:
        bot.send_message(message.chat.id,
                         '‚ùó –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ—Ä–≤–∏—Å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –ø–æ –æ—Ç–µ–ª—è–º –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç')


def print_info(message: Message, hotels: List[Tuple], all_photo_list: List[List]) -> None:
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –æ—Ç–µ–ª—è–º –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º(—Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏)"""

    with bot.retrieve_data(message.chat.id) as data:
        pass
    bot.send_message(message.chat.id, '–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞:')
    for i in range(int(data["hotels_count"])):

        # –ø–æ–¥—Å—á–µ—Ç –æ–±—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –æ—Ç–µ–ª—è
        total_cost = round(int(data["date"][2]) * int(hotels[i][2][1:]), 5)
        text = f'üè® –ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ç–µ–ª—è: {hotels[i][1]}' \
           f'\nüìç –ê–¥—Ä–µ—Å –æ—Ç–µ–ª—è: {hotels[i][3]}' \
           f'\n‚úî –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞: {hotels[i][6]}' \
           f'\nüíµ –¶–µ–Ω–∞ –∑–∞ —Å—É—Ç–∫–∏: {hotels[i][2]}' \
           f'\nüí∞ –¶–µ–Ω–∞ –≤—Å–µ–≥–æ: {total_cost}$' \
           f'\n‚ú® –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ –æ—Ç–µ–ª—è: {hotels[i][5]}' \
           f'\nüìà –†–µ–π—Ç–∏–Ω–≥ –æ—Ç–µ–ª—è: {hotels[i][4]}' \

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ
        bot.send_message(message.chat.id,
                         text,
                         reply_markup=geo(hotels[i][7], hotels[i][8]))
        try:
            bot.send_media_group(message.chat.id,
                                 [InputMediaPhoto(media=photo)
                                  if photo != '—Ñ–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
                                  else bot.send_message(
                                     message.chat.id,
                                     f'–î–ª—è –æ—Ç–µ–ª—è {hotels[i][1]} –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ñ–æ—Ç–æ')
                                  for photo in all_photo_list[i]])

        except Exception:
            pass

    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏:', reply_markup=all_commands())
    bot.register_next_step_handler(message, add_in_database, hotels)

    # –£–¥–∞–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ—Ç–µ–ª—è(–¥—É–º–∞—é —Ç–∞–∫ –¥–æ–ª–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ —Ä–∞–±–æ—Ç–∞—Ç—å –∏ –Ω–µ –∑–∞–Ω–∏–º–∞—Ç—å –ª–∏—à–Ω—é—é –ø–∞–º—è—Ç—å)
    del hotels


@bot.callback_query_handler(func=lambda call: call.data.startswith('geo'))
def callback_func(call: CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∫–Ω–æ–ø–æ–∫ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏ """

    if call.message:
        geo_data = call.data.split('/')
        lat = float(geo_data[1])
        lon = float(geo_data[2])
        if call.data:
            bot.send_location(call.message.chat.id, latitude=lat, longitude=lon)


def add_in_database(message: Message, hotels: List[Tuple]) -> None:
    """–§—É–Ω–∫—Ü–∏—è, –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –ë–î"""

    # —Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è
    date = datetime.datetime.now()
    date = str(date)

    users_tuple = (message.from_user.id, date[:-6], 'lowprice')
    add_in_db(users_info=users_tuple, hotels=hotels)


